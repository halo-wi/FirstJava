========================================
		JOIN
========================================

select*from jobs

1.직원들의 이름과 직급명(job_title)을 조회하시오.

select emp.first_name, jobs.job_title
from employees emp, jobs
where emp.job_id = jobs.job_id

select employees.first_name, jobs.job_title
from employees  join jobs using(job_id) 

select employees.first_name,  jobs.job_title
from employees  join jobs 
on employees.job_id = jobs.job_id


select*from departments
2.부서이름과 부서가 속한 도시명(city)을 조회하시오.

select departments.department_name, locations.city
from departments join  LOCATIONS using(location_id)



3. 직원의 이름과 근무국가명을 조회하시오.

select employees.first_name, countries.country_name
from employees join departments using(department_id) join locations using(location_id) join countries using(country_id)

select  first_name, country_name
from employees join departments using(department_id)
    join locations using(location_id)
    join countries using(country_id)



4. 직책(job_title)이 'manager' 인 사람의 이름, 직책, 부서명을 조회하시오.

select first_name, department_name, job_title 
from employees, departments, jobs
where employees.department_id =  departments.department_id
and  employees.job_id = jobs.job_id
and substr(jobs.job_title, -7, 7) = initcap('manager')


5. 직원들의 이름, 입사일, 부서명을 조회하시오.

select first_name, hire_date, department_name 
from employees, departments
where employees.department_id =  departments.department_id



6. 직원들의 이름, 입사일, 부서명을 조회하시오.
단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.

select first_name, hire_date, department_name 
from employees left outer join departments using(department_id)




7. 직원의 이름과 직책(job_title)을 출력하시오.
단, 사용되지 않는 직책이 있다면 그 직책정보도 출력결과에 포함시키시오.

select first_name, job_title
from employees right outer join jobs using(job_id)


-- SELF JOIN
8. 직원의 이름과 관리자 이름을 조회하시오.

select emp.first_name, man.first_name
from employees emp, employees man
where emp.manager_id=man.employee_id

9. 직원의 이름과 관리자 이름을 조회하시오.
관리자가 없는 직원정보도 모두 출력하시오.

select emp.first_name, man.first_name
from employees emp, employees man
where emp.manager_id(+)=man.employee_id


10. 관리자 이름과 관리자가 관리하는 직원의 수를 조회하시오.
단, 관리직원수가 3명 이상인 관리자만 출력되도록 하시오.

select count(emp.first_name), man.first_name
from employees emp, employees man
where emp.manager_id=man.employee_id
group by man.first_name
having count( emp.first_name)>=3






--review
select first_name, salary, job_title, min_salary, department_name
from employees, jobs, departments
where employees.department_id = departments.department_id
and employees.job_id=jobs.job_id

select first_name, salary, job_title, min_salary, department_name
from employees inner join jobs on (employees.job_id=jobs.job_id)
join departments on (employees.department_id = departments.department_id)

select departments.*, employees.first_name, employees.salary, employees.hire_date
from departments join employees on  (departments.manager_id=employees.employee_id)


select emp.first_name, man.first_name, man.salary
from employees emp, employees man
where emp.manager_id = man.employee_id

-- steven 과 같은부서에 일하는 직원

select department_id
from employees
where first_name = 'Steven' 


select *
from employees
where department_id = (
    select department_id
    from employees
    where first_name = 'Lex' )


select *
from employees
where salary >= (
    select salary
    from employees
    where first_name = 'Lex' 
)
and first_name <> 'Lex' 


--직속상관이 steven인 사원정보
--다치불가 = 하나의 칼럼이 여러 값을 가질수 없음
--steven이 2명이기 때문에 manager_id에 employee_id 2개의 값이 들어감 (=)사용불가
select *
from employees
where manager_id in (
select employee_id
from employees
where first_name = 'Steven')


select *
from employees
where salary >= (
select  avg(salary)
from employees)



-- 급여가 10000 이상인 부서의 직원들
-- =all : 모두일치
-- =ant : 아무거나와 일치


select *
from employees
where department_id = any (
select distinct department_id
from employees
where salary >= 10000)

-- 부서별 가장 많은 급여를 받은 작원
-- multi cokumn subquery
select *
from employees
where (department_id, salary) 
in (
select department_id, max(salary) 
from employees
group by department_id
)



select * 
from departments
where department_id=(
select distinct department_id
from employees
where job_id = 'IT_PROG'
)


--9000보다큼
select * 
from employees
where salary >all (
select salary 
from employees
where department_id = 60
)

--4200 (최소)보다큼
select * 
from employees
where salary >any (
select salary 
from employees
where department_id = 60
)

--본인이 받는 급여가 본인이 속한 부서의 평균보다 적은 급여를 받는 직원
--상관형 subquery

select *
from employees aa
where salary < (
    select avg(salary)
    from employees
    where department_id = aa.department_id
)


--가상의 테이블 (inline view)
select *
from employees aa,(select department_id, avg(salary) avg_sal
                    from employees
                    group by department_id) bb
where aa.department_id = bb.department_id
and aa.salary<avg_sal


--평균급여보다 높고 최대급여보다 낮은 직원

select*
from employees
where salary > (select avg(salary) from employees)
and salary < (select max(salary) from employees)

select*
from employees, (select avg(salary) sal from employees) aa, (select max(salary) sal from employees) bb
where salary > aa.sal
and salary < bb.sal





========================================
		SubQuery
========================================
1. 'IT'부서에서 근무하는 직원들의 이름, 급여, 입사일을 조회하시오.

select first_name, salary, hire_date
from employees
where department_id = (
select department_id
from departments
where department_name='IT'
)



2. 'Alexander' 와 같은 부서에서 근무하는 직원의 이름과 부서id를 조회하시오.

select first_name, department_id
from employees
where department_id in (
select department_id
from employees
where first_name='Alexander'
)

select first_name, department_id
from employees
where department_id = any(
select department_id
from employees
where first_name='Alexander'
)




3. 직원들의 이름, 입사일, 부서명을 조회하시오.
단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.
그리고 부서가 없는 직원에 대해서는 '<부서없음>' 이 출력되도록 한다.

--outer join, nvl()

select first_name, hire_date, nvl(department_name, '부서없음')
from employees left outer join  departments using (department_id)

select first_name, hire_date,
    nvl(department_name, '부서없음'),
    nvl2(department_name, department_name ,'부서없음')
from employees, departments




4. 직원의 직책에 따라 월급을 다르게 지급하려고 한다.
직책에 'Manager'가 포함된 직원은 급여에 0.5를 곱하고
나머지 직원들에 대해서는 원래의 급여를 지급하도록 한다. 
적절하게 조회하시오.

select first_name, salary, job_title,
    decode(substr(job_title,-7,7), 'Manager', salary*0.5,salary) "급여",
    case when job_title like '%Manager%' then salary*0/5 else salary end "급여2",
    case when substr(job_title,-7,7) = 'Manager' then salary*0/5 else salary end "급여3"
    from employees join jobs using (job_id)


5. 각 부서별로 최저급여를 받는 직원의 이름과 부서id, 급여를 조회하시오.

select first_name, department_id, salary
from employees
where (salary, department_id) in(
select min(salary), department_id
from employees
group by department_id
)

--inline
select first_name, aa.department_id, salary
from employees aa,(select department_id, min(salary) min_sal
                    from employees
                    group by department_id) bb
where aa.department_id = bb.department_id
and aa.salary = bb.min_sal




-- 연습문제
1. 80번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 부서id, 급여를 조회하시오.

select first_name, department_id, salary
from employees
where salary > (
select avg(salary)
from employees
where department_id= 80
)

select*from locations

2. 'South San Francisco'에 근무하는 직원의 최소급여보다 급여를 많이 받으면서 
50 번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 급여, 부서명, 
부서id를 조회하시오.

select first_name, department_id, salary, department_name
from employees left outer join departments using(department_id)
where salary > (
    select min(salary)
    from employees
    where department_id = (
        select department_id
        from locations join departments using(location_id)
        where city = 'South San Francisco'))
and salary>(select avg(salary)
    from employees
    where department_id= 50)


3. 각 직급별(job_title) 인원수를 조회하되 사용되지 않은 직급이 있다면 해당 직급도
출력결과에 포함시키시오. 그리고 직급별 인원수가 3명 이상인 직급만 출력결과에 포함시키시오.

select job_title, count(first_name)
from employees right outer join jobs using(job_id)
group by job_title
having count(first_name) >= 3


4. 각 부서별 최대급여를 받는 직원의 이름, 부서명, 급여를 조회하시오.

select first_name, department_name, salary
from employees join departments using(department_id)
where (department_id, salary) in (
select department_id, max(salary)
from employees 
group by department_id
)


select*from departments
5. 직원의 이름, 부서id, 급여를 조회하시오. 그리고 직원이 속한 해당 부서의 
최소급여를 마지막에 포함시켜 출력 하시오.

--inline
select emp.first_name, emp.department_id, emp.salary, mi.minsal
from employees emp left outer join (
    select department_id, min(salary) minsal
    from employees
    group by department_id) mi on(nvl(emp.department_id,0)=mi.department_id)

--scala
select first_name, department_id, salary, (
                                            select min(salary)   
                                            from employees
                                            where department_id = emp.department_id)                          
from employees emp
