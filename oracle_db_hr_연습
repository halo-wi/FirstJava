========================================
		JOIN
========================================

1.직원들의 이름과 직급명(job_title)을 조회하시오.

select employees.first_name, jobs.job_title
from employees, jobs
where employees.job_id = jobs.job_id

select employees.first_name, jobs.job_title
from employees  join jobs using(job_id) 

select employees.first_name,  jobs.job_title
from employees  join jobs 
on employees.job_id = jobs.job_id

2.부서이름과 부서가 속한 도시명(city)을 조회하시오.

select department_name, city
from departments, locations
where departments.location_id = locations.location_id

--ansi표준

select department_name, city
from departments  jobs join jobs using(job_id) 



3. 직원의 이름과 근무국가명을 조회하시오. (employees, departments, locations,countries)
 
select  first_name, country_name
from employees, departments, locations,countries
where employees.department_id = departments.location_id
and departments.location_id = locations.location_id
and  locations.location_id = countries.country_id

select  first_name, country_name
from employees join departments using(department_id)
    join locations using(location_id)
    join countries using(country_id)




4. 직책(job_title)이 'manager' 인 사람의 이름, 직책, 부서명을 조회하시오.

select * from jobs;

select  first_name, job_title, department_name
from employees, jobs, departments
where employees.department_id = departments.department_id
and substr(jobs.job_title,-7,7) = initcap('manager')


 


5. 직원들의 이름, 입사일, 부서명을 조회하시오.
 
select first_name,  hire_date, department_name
from employees, departments
where employees.department_id = departments.department_id
and hire_date >= '2005.01.01'
--and to_char(hire_date, 'yyyy')>=2005




-- outer join(oracle)

6. 직원들의 이름, 입사일, 부서명을 조회하시오.
단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.

select first_name,  hire_date, department_name
from employees, departments
where employees.department_id = departments.department_id(+) --oracle

select first_name,  hire_date, department_name
from employees, departments
where employees.department_id* = departments.department_id(+) --sybase

select first_name,  hire_date, department_name
from employees inner join departments
on employees.department_id = departments.department_id -- 표준문법: inner 생략가능

-- left right 기준을 정함 . 기준으로 나머지는 없어도 나온다
select first_name,  hire_date, department_name
from employees left outer join departments
on employees.department_id = departments.department_id


select first_name,  hire_date, department_name
from departments  right outer join employees
on employees.department_id = departments.department_id

select first_name,  hire_date, department_name
from employees full outer join departments
on employees.department_id = departments.department_id
--부서가 직원을 참조 = 건수가 부서와 같다

select first_name,  hire_date, department_name
from departments  join employees
on employees.department_id(+) = departments.manager_id

--직원정보 : 직원 번호, 이름 (직원이 부서에 근무한다는 관계 -> 부서를 참조)
--부서정보 : 부서번호, 이름, 위치, 대표번호, 부서장(직원번호, 직원 아이디 참조한다. )



7. 직원의 이름과 직책(job_title)을 출력하시오.
단, 사용되지 않는 직책이 있다면 그 직책정보도 출력결과에 포함시키시오.

select first_name, job_title
from employees join jobs using (job_id)

select*from jobs;
insert into jobs values('play', 'aoao',5000,10000);

select first_name, salary from employees;

create table salgrade (grade char(i), minsal number, maxsal number);


select emp.employee_id, emp.first_name, 매니저.first_name
from employees emp, employees 매니저
where emp.manager_id = 매니저.employee_id (+)



3.관리자 이름과 관리하는 직원의 수를 조회하시오
단, 관리직원수가 3명 이상만 조회하시오

select  count  (직원.employee_id), 관리자.first_name
from employees 직원, employees 관리자
where 직원.manager_id = 관리자.employee_id
group by 관리자.first_name
having count (직원.employee_id) >= 3


select*from employees

========================================
		SELECT 기본
========================================

1. 급여가 15000 이상인 직원들의 이름, 급여, 부서id를 조회하시오.
 
 select first_name, salary, department_id
 from employees
 where salary >= 15000
 
 

2. 직원 중에서 연봉이 170000 이상인 직원들의 이름, 연봉을 조회하시오.
   연봉은 급여(salary)에 12를 곱한 값입니다.
   
 select first_name, salary, department_id
 from employees
 where salary*12  >= 170000
   
 

3. 직원 중에서 부서id가 없는 직원의 이름과 급여를 조회하시오.
 
 select first_name, salary, department_id
 from employees
 where department_id is null

4. 2007년 이전에 입사한 직원의 이름, 급여, 입사일을 조회하시오.
 
select first_name, salary, department_id
 from employees
 where hire_date<='2007.01.01'


-- 논리연산자 --
1. 80, 50 번 부서에 속해있으면서 급여가 13000 이상인 직원의 이름, 급여, 부서id
를 조회하시오.
 
 select first_name, salary, department_id
 from employees
 where salary >= 13000
 and department_id in (50,80)


2. 95년 이후에 입사한 직원들 중에서 급여가 1300 이상 20000 이하인 직원들의 
이름, 급여, 부서id, 입사일을 조회하시오.
 
 select first_name, salary, department_id, hire_date
 from employees
 where salary between 1300 and 20000
 and hire_date > '1995.01.01'
 
 

-- SQL 비교연산자 --
1. 80, 50 번 부서에 속해있으면서 급여가 13000 이상인 직원의 이름, 급여, 부서id
를 조회하시오.
 
  select first_name, salary, department_id
 from employees 
 where salary >= 13000
 and department_id in (50,80)
 
 

2. 2005년 이후에 입사한 직원들 중에서 급여가 1300 이상 20000 이하인 직원들의 
이름, 급여, 부서id, 입사일을 조회하시오.
 
 select first_name, salary, department_id, hire_date
 from employees
 where salary between 1300 and 20000
 and to_char(hire_date, 'yyyy')>= 2005

3. 2005년도 입사한 직원의 정보만 출력하시오.

 select *
 from employees
 where  to_char(hire_date, 'yyyy') = 2005
 
4. 이름이 D로 시작하는 직원의 이름, 급여, 입사일을 조회하시오.
 
  select first_name, salary, department_id, hire_date
 from employees
 where first_name like 'D%'

5. 12월에 입사한 직원의 이름, 급여, 입사일을 조회하시오.
 
select first_name, salary, department_id, hire_date
 from employees
 where to_char(hire_date, 'mm') =12
 
 

6. 이름에 le 가 들어간 직원의 이름, 급여, 입사일을 조회하시오.
 
   select first_name, salary, department_id, hire_date
 from employees
 where first_name like '%le%'
 
 

7. 이름이 m으로 끝나는 직원의 이름, 급여, 입사일을 조회하시오.
 
    select first_name, salary, department_id, hire_date
 from employees
 where first_name like '%m'
 

8. 이름의 세번째 글자가 d인 이름, 급여, 입사일을 조회하시오.

 select first_name, salary, department_id, hire_date
 from employees
 where last_name like '__d%'

 

9. 커미션을 받는 직원의 이름, 커미션, 급여를 조회하시오.


  select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where commission_pct is not null
 
 

10. 커미션을 받지 않는 직원의 이름, 커미션, 급여를 조회하시오.
 
   select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where commission_pct is null
 

11. 2000년대에 입사해서 30, 50, 80 번 부서에 속해있으면서, 
급여를 5000 이상 17000 이하를 받는 직원을 조회하시오. 
단, 커미션을 받지 않는 직원들은 검색 대상에서 제외시키며, 먼저 입사한 직원이 
먼저 출력되어야 하며 입사일이 같은 경우 급여가 많은 직원이 먼저 출력되록 하시오.

   select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where hire_date >= '2000.01.01'
 and department_id in (30,50,80)
 and salary between 5000 and 17000
 and  commission_pct is not null
 order by hire_date asc, salary desc

 
========================================
		단일행 함수
========================================

1. 이름이 'adam' 인 직원의 급여와 입사일을 조회하시오.

  select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where first_name = initcap('adam')


select*from tab
select*from countries
 
2. 나라 명이 'united states of america' 인 나라의 국가 코드를 조회하시오.

  select country_id
 from countries
 where lower(country_name)= 'united states of america'



 
3. 'Adam의 입사일은 95/11/02 이고, 급여는 7000 입니다.' 이런 식으로 직원
정보를 조회하시오.
 
 select first_name||'의 입사일은' ,  hire_date||' 이고, 급여는', salary||'입니다.'
 from employees


 
 select*from employees
 
4. 이름이 5글자 이하인 직원들의 이름, 급여, 입사일을 조회하시오.
 
 
  select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where  length(first_name) = 5
 
 
5. 96년도에 입사한 직원의 이름, 입사일을 조회하시오.

  select first_name, salary, department_id, hire_date,  commission_pct
 from employees
 where to_char(hire_date,'yyyy') = 2006


6. 20년 이상 장기 근속한 직원들의 이름, 입사일, 급여, 근무년차를 조회하시오.

  select first_name, salary, department_id, hire_date,  commission_pct, sysdate
 from employees
 where (sysdate - hire_date)/365 >= 15


select*from departments
select*from employees

7. 각 부서별 인원수를 조회하되 인원수가 5명 이상인 부서만 출력되도록 하시오.
  
 select count(emp.department_id), dep.department_name
 from  employees emp, departments dep
 where emp.department_id = dep.department_id
 group by department_name
having count (employee_id)>=5

select  count  (직원.employee_id), 관리자.first_name
from employees 직원, employees 관리자
where 직원.manager_id = 관리자.employee_id
group by 관리자.first_name
having count (직원.employee_id) >= 3


select*from departments
select*from employees
select*from tab
select*from EMP_DETAILS_VIEW
8. 각 부서별 최대급여와 최소급여를 조회하시오.
   단, 최대급여와 최소급여가 같은 부서는 직원이 한명일 가능성이 높기때문에 
   조회결과에서 제외시킨다.


select dep.department_name, max(salary), min(salary)
from employees emp, departments dep
where emp.department_id = dep.department_id
having count (emp.employee_id) >= 2
group by  department_name


   
9. 부서가 50, 80, 110 번인 직원들 중에서 급여를 5000 이상 24000 이하를 받는
   직원들을 대상으로 부서별 평균 급여를 조회하시오.
   다, 평균급여가 8000 이상인 부서만 출력되어야 하며, 출력결과를 평균급여가 높은
   부서면저 출력되도록 해야 한다.

select dep.department_name, avg(salary)
from employees emp, departments dep
where emp.department_id = dep.department_id
having avg(salary) >=8000
group by  department_name
order by avg(salary) desc


========================================
		JOIN
========================================

select*from jobs

1.직원들의 이름과 직급명(job_title)을 조회하시오.

select emp.first_name, jobs.job_title
from employees emp, jobs
where emp.job_id = jobs.job_id

select employees.first_name, jobs.job_title
from employees  join jobs using(job_id) 

select employees.first_name,  jobs.job_title
from employees  join jobs 
on employees.job_id = jobs.job_id


select*from departments
2.부서이름과 부서가 속한 도시명(city)을 조회하시오.

select departments.department_name, locations.city
from departments join  LOCATIONS using(location_id)



3. 직원의 이름과 근무국가명을 조회하시오.

select employees.first_name, countries.country_name
from employees join departments using(department_id) join locations using(location_id) join countries using(country_id)

select  first_name, country_name
from employees join departments using(department_id)
    join locations using(location_id)
    join countries using(country_id)



4. 직책(job_title)이 'manager' 인 사람의 이름, 직책, 부서명을 조회하시오.

select first_name, department_name, job_title 
from employees, departments, jobs
where employees.department_id =  departments.department_id
and  employees.job_id = jobs.job_id
and substr(jobs.job_title, -7, 7) = initcap('manager')


5. 직원들의 이름, 입사일, 부서명을 조회하시오.

select first_name, hire_date, department_name 
from employees, departments
where employees.department_id =  departments.department_id



6. 직원들의 이름, 입사일, 부서명을 조회하시오.
단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.

select first_name, hire_date, department_name 
from employees left outer join departments using(department_id)




7. 직원의 이름과 직책(job_title)을 출력하시오.
단, 사용되지 않는 직책이 있다면 그 직책정보도 출력결과에 포함시키시오.

select first_name, job_title
from employees right outer join jobs using(job_id)


-- SELF JOIN
8. 직원의 이름과 관리자 이름을 조회하시오.

select emp.first_name, man.first_name
from employees emp, employees man
where emp.manager_id=man.employee_id

9. 직원의 이름과 관리자 이름을 조회하시오.
관리자가 없는 직원정보도 모두 출력하시오.

select emp.first_name, man.first_name
from employees emp, employees man
where emp.manager_id(+)=man.employee_id


10. 관리자 이름과 관리자가 관리하는 직원의 수를 조회하시오.
단, 관리직원수가 3명 이상인 관리자만 출력되도록 하시오.

select count(emp.first_name), man.first_name
from employees emp, employees man
where emp.manager_id=man.employee_id
group by man.first_name
having count( emp.first_name)>=3

